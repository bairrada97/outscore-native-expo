---
description: 
globs: 
alwaysApply: false
---
Outscore App Context

Overview:
Outscore is a football (soccer) application built with Expo (React Native) for the mobile/web client and Hono for the backend API. The app provides real-time and scheduled football match information.

Frontend Architecture (Expo):
- Built with Expo (React Native)
- Uses Tab Navigation for date-based fixture browsing
- Implements React Native Tab View for custom tab implementation

Tab Navigation Structure:
- Dynamic tabs showing 5 days of fixtures:
  * 2 days before today
  * Today
  * 2 days after today
  * Plus a "LIVE" tab for ongoing matches
- Each tab corresponds to a specific date
- Tab switching updates the URL params to maintain navigation state
- Uses memoization for performance optimization

Data Flow:
1. Homepage loads with default date (today)
2. Tab selection triggers fixture data fetch for selected date
3. Live tab shows real-time match updates
4. Uses URL params to maintain navigation state

API Layer:
- Backend built with Hono
- Acts as a middleware between client and third-party sports data API
- Implements caching strategy:
  * Redis cache for short-term data (live scores, current day fixtures)
  * Supabase cache for historical data
  * Cache invalidation based on match status and time and also Date
  * Different cache durations for different types of data:
    - Live matches: 15 seconds
    - Today's fixtures: 15 seconds
    - Future fixtures: until first match of that day starts
    - Past fixtures: 24 hours or infinite

Performance Optimizations:
- Memoized components to prevent unnecessary re-renders
- Lazy loading of tab content
- Controlled tab switching to prevent race conditions
- URL-based state management for consistent navigation

Key Features:
- Date-based fixture browsing
- Live match tracking
- Responsive design (works on mobile and web)
- Efficient data caching
- Smooth tab transitions
- URL-based navigation state

Technical Stack:
- Frontend: Expo (React Native)
- Backend: Hono
- State Management: React hooks + React Query
- Navigation: Expo Router
- Data Fetching: Custom API layer with caching + React Query + React Query Persist storage
- UI Components: Custom components with native styling

Common Use Cases:
1. User browses today's matches
2. User checks live scores
3. User plans ahead by viewing future fixtures
4. User reviews past match results

Edge Cases:
- Data is stored in UTC, user is in a different timezone and if its really far away from UTC it will have some matches from UTC + day before/day after UTC which for him both are still on same day so his list of matches for today needs to contain some different UTC days.
- User timezone is different from UTC, so his today is different from UTC today which means R2 needs always have data from UTC but user needs to see correct data for his timezone

This context represents a modern sports application with focus on performance, user experience, and efficient data management. The application handles real-time data while maintaining smooth performance through various optimization techniques.





